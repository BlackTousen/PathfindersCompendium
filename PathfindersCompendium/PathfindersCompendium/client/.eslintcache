[{"C:\\Users\\Jerry\\workspace\\CharacterSheet\\PathfindersCompendium\\PathfindersCompendium\\client\\src\\index.js":"1","C:\\Users\\Jerry\\workspace\\CharacterSheet\\PathfindersCompendium\\PathfindersCompendium\\client\\src\\App.js":"2","C:\\Users\\Jerry\\workspace\\CharacterSheet\\PathfindersCompendium\\PathfindersCompendium\\client\\src\\reportWebVitals.js":"3","C:\\Users\\Jerry\\workspace\\CharacterSheet\\PathfindersCompendium\\PathfindersCompendium\\client\\src\\components\\ApplicationViews.js":"4","C:\\Users\\Jerry\\workspace\\CharacterSheet\\PathfindersCompendium\\PathfindersCompendium\\client\\src\\components\\AppHeader.js":"5","C:\\Users\\Jerry\\workspace\\CharacterSheet\\PathfindersCompendium\\PathfindersCompendium\\client\\src\\HomePage\\HomePageManager.js":"6","C:\\Users\\Jerry\\workspace\\CharacterSheet\\PathfindersCompendium\\PathfindersCompendium\\client\\src\\providers\\UserProfileProvider.js":"7","C:\\Users\\Jerry\\workspace\\CharacterSheet\\PathfindersCompendium\\PathfindersCompendium\\client\\src\\Pages\\Login.js":"8","C:\\Users\\Jerry\\workspace\\CharacterSheet\\PathfindersCompendium\\PathfindersCompendium\\client\\src\\Pages\\Register.js":"9","C:\\Users\\Jerry\\workspace\\CharacterSheet\\PathfindersCompendium\\PathfindersCompendium\\client\\src\\components\\Attributes.js":"10","C:\\Users\\Jerry\\workspace\\CharacterSheet\\PathfindersCompendium\\PathfindersCompendium\\client\\src\\components\\CharacterSheet.js":"11","C:\\Users\\Jerry\\workspace\\CharacterSheet\\PathfindersCompendium\\PathfindersCompendium\\client\\src\\components\\Skills.js":"12","C:\\Users\\Jerry\\workspace\\CharacterSheet\\PathfindersCompendium\\PathfindersCompendium\\client\\src\\components\\Defense.js":"13","C:\\Users\\Jerry\\workspace\\CharacterSheet\\PathfindersCompendium\\PathfindersCompendium\\client\\src\\components\\Offense.js":"14","C:\\Users\\Jerry\\workspace\\CharacterSheet\\PathfindersCompendium\\PathfindersCompendium\\client\\src\\components\\InformationViews.js":"15","C:\\Users\\Jerry\\workspace\\CharacterSheet\\PathfindersCompendium\\PathfindersCompendium\\client\\src\\providers\\InformationDataProvider.js":"16","C:\\Users\\Jerry\\workspace\\CharacterSheet\\PathfindersCompendium\\PathfindersCompendium\\client\\src\\components\\AC.js":"17","C:\\Users\\Jerry\\workspace\\CharacterSheet\\PathfindersCompendium\\PathfindersCompendium\\client\\src\\components\\Spells.js":"18","C:\\Users\\Jerry\\workspace\\CharacterSheet\\PathfindersCompendium\\PathfindersCompendium\\client\\src\\components\\Feats.js":"19"},{"size":648,"mtime":1611953532484,"results":"20","hashOfConfig":"21"},{"size":1367,"mtime":1613066496929,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":499162500000,"results":"23","hashOfConfig":"21"},{"size":806,"mtime":1611953729976,"results":"24","hashOfConfig":"21"},{"size":2208,"mtime":1611954557064,"results":"25","hashOfConfig":"21"},{"size":4004,"mtime":1613066496933,"results":"26","hashOfConfig":"21"},{"size":3198,"mtime":1611951656420,"results":"27","hashOfConfig":"21"},{"size":2328,"mtime":1613066496942,"results":"28","hashOfConfig":"21"},{"size":3893,"mtime":1611951729693,"results":"29","hashOfConfig":"21"},{"size":3383,"mtime":1613066496949,"results":"30","hashOfConfig":"21"},{"size":14072,"mtime":1613066496951,"results":"31","hashOfConfig":"21"},{"size":3762,"mtime":1613066496959,"results":"32","hashOfConfig":"21"},{"size":3951,"mtime":1613066496953,"results":"33","hashOfConfig":"21"},{"size":5010,"mtime":1613066496956,"results":"34","hashOfConfig":"21"},{"size":794,"mtime":1613066496955,"results":"35","hashOfConfig":"21"},{"size":416,"mtime":1613066496968,"results":"36","hashOfConfig":"21"},{"size":43812,"mtime":1613066496946,"results":"37","hashOfConfig":"21"},{"size":4669,"mtime":1613066496962,"results":"38","hashOfConfig":"21"},{"size":4328,"mtime":1613066496954,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1jlz9gr",{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"42"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"42"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"42"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"42"},"C:\\Users\\Jerry\\workspace\\CharacterSheet\\PathfindersCompendium\\PathfindersCompendium\\client\\src\\index.js",[],["92","93"],"C:\\Users\\Jerry\\workspace\\CharacterSheet\\PathfindersCompendium\\PathfindersCompendium\\client\\src\\App.js",["94"],"C:\\Users\\Jerry\\workspace\\CharacterSheet\\PathfindersCompendium\\PathfindersCompendium\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Jerry\\workspace\\CharacterSheet\\PathfindersCompendium\\PathfindersCompendium\\client\\src\\components\\ApplicationViews.js",["95"],"import React, { useContext } from \"react\";\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\nimport HomePageManager from \"../HomePage/HomePageManager\";\r\nimport Login from \"../Pages/Login\";\r\nimport Register from \"../Pages/Register\";\r\nimport { UserProfileContext } from \"../providers/UserProfileProvider\";\r\n\r\nconst ApplicationViews = () => {\r\n  const { isLoggedIn } = useContext(UserProfileContext);\r\n  const { isAdmin } = useContext(UserProfileContext);\r\n\r\n  return (\r\n    <Switch>\r\n      <Route path=\"/\" exact>\r\n        {isLoggedIn ? <HomePageManager /> : <Redirect to=\"/login\" />}\r\n      </Route>\r\n      <Route path=\"/login\">\r\n        <Login />\r\n      </Route>\r\n      <Route path=\"/register\">\r\n        <Register />\r\n      </Route>\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default ApplicationViews;\r\n","C:\\Users\\Jerry\\workspace\\CharacterSheet\\PathfindersCompendium\\PathfindersCompendium\\client\\src\\components\\AppHeader.js",["96"],"import React, { useState, useContext } from \"react\";\r\nimport { Link, NavLink, useHistory } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport {\r\n  Collapse,\r\n  Nav,\r\n  Navbar,\r\n  NavbarBrand,\r\n  NavbarText,\r\n  NavbarToggler,\r\n  NavItem,\r\n} from \"reactstrap\";\r\n\r\nimport { UserProfileContext } from \"../providers/UserProfileProvider\";\r\n\r\nconst AppHeader = () => {\r\n  const { getCurrentUser, logout, isAdmin } = useContext(UserProfileContext);\r\n  const user = getCurrentUser();\r\n  const history = useHistory();\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  const logoutAndReturn = () => {\r\n    return logout().then(() => {\r\n      toast.dark(\"You are now logged out\");\r\n      history.push(\"/login\");\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Navbar color=\"dark\" dark expand=\"md\">\r\n        <NavbarBrand tag={Link} to=\"/\">\r\n          <img\r\n            id=\"header-logo\"\r\n            src=\"/quill.png\"\r\n            width=\"30\"\r\n            height=\"30\"\r\n            className=\"mr-1\"\r\n            alt=\"Quill Logo\"\r\n          />\r\n          PF Compendium\r\n        </NavbarBrand>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"mr-auto\" navbar>\r\n            {user ? (\r\n              <>\r\n                <NavItem>\r\n                  <NavLink tag={Link} to=\"/\" onClick={logoutAndReturn}>\r\n                    Logout\r\n                  </NavLink>\r\n                </NavItem>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <NavItem>\r\n                  <NavLink to=\"/login\" tag={Link}>\r\n                    Login\r\n                  </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink to=\"/register\" tag={Link}>\r\n                    Register\r\n                  </NavLink>\r\n                </NavItem>\r\n              </>\r\n            )}\r\n          </Nav>\r\n          {user ? (\r\n            <NavbarText className=\"d-sm-none d-md-block\">\r\n              Welcome {user.displayName}\r\n            </NavbarText>\r\n          ) : null}\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppHeader;\r\n","C:\\Users\\Jerry\\workspace\\CharacterSheet\\PathfindersCompendium\\PathfindersCompendium\\client\\src\\HomePage\\HomePageManager.js",["97"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { TabList, Tabs, Tab, TabPanel } from \"react-tabs\";\r\nimport { Container, Row, Col, Button } from \"reactstrap\";\r\nimport { UserProfileContext } from \"../providers/UserProfileProvider\";\r\nimport \"react-tabs/style/react-tabs.css\";\r\nimport CharacterSheet from \"../components/CharacterSheet\";\r\n\r\nconst HomePageManager = () => {\r\n  const { getCurrentUser, getToken } = useContext(UserProfileContext);\r\n  const [sheets, setSheets] = useState();\r\n  const [classes, setClasses] = useState([]);\r\n  const [sheetState, setSheetState] = useState(false);\r\n  const [sheetToEdit, setEditing] = useState({});\r\n  const user = getCurrentUser();\r\n\r\n  useEffect(() => {\r\n    getClasses()\r\n      .then(setClasses)\r\n      .then(getSheets)\r\n      .then((res) => {\r\n        ListSheets();\r\n      });\r\n  }, []);\r\n  useEffect(() => {}, [sheets]);\r\n\r\n  const getSheets = () => {\r\n    return getToken().then((token) => {\r\n      return fetch(`/api/CharacterSheet`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      })\r\n        .then((res) => res.json())\r\n        .then(setSheets);\r\n    });\r\n  };\r\n  const getClasses = () => fetch(`/api/Classes`).then((res) => res.json());\r\n\r\n  // const RandomName = () => {\r\n  //   return fetch(\r\n  //     \"https://api.parser.name/?api_key=0e74eae57d4d7452eb110bd568342372&endpoint=generate\"\r\n  //   ).then((res) => res.json());\r\n  // };\r\n  const AddCharacter = () => {\r\n    return getToken().then((token) => {\r\n      return fetch(`/api/CharacterSheet`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify({\r\n          useProfileId: user.id,\r\n          name: \"Default\",\r\n          classId: 1,\r\n        }),\r\n      });\r\n    });\r\n  };\r\n\r\n  const ListSheets = () => {\r\n    console.log(sheets);\r\n    if (sheets === undefined) {\r\n      setSheetState(false);\r\n      return;\r\n    }\r\n    if (sheets[0] === undefined) {\r\n      setSheetState(false);\r\n      return;\r\n    }\r\n    setEditing(sheets[0]);\r\n    setSheetState(true);\r\n  };\r\n\r\n  while (sheets === undefined) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {sheetState ? (\r\n        <Container>\r\n          <Row>\r\n            <Col>\r\n              <Tabs>\r\n                <TabList>\r\n                  {sheets.map((sheet) => {\r\n                    return (\r\n                      <Tab onClick={(e) => setEditing(sheet)} value={sheet.id}>\r\n                        {sheet.name}\r\n                      </Tab>\r\n                    );\r\n                  })}\r\n                </TabList>\r\n                {sheets.map((sheet) => {\r\n                  return (\r\n                    <TabPanel>\r\n                      <CharacterSheet\r\n                        key={sheet.id}\r\n                        sheet={sheet}\r\n                        setEditing={setEditing}\r\n                        sheetToEdit={sheetToEdit}\r\n                        getSheets={getSheets}\r\n                        classes={classes}\r\n                      />\r\n                    </TabPanel>\r\n                  );\r\n                })}\r\n                {sheets[3] === undefined ? (\r\n                  <Button\r\n                    color=\"primary\"\r\n                    onClick={(e) => AddCharacter().then(getSheets)}\r\n                  >\r\n                    Add Character\r\n                  </Button>\r\n                ) : null}\r\n              </Tabs>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      ) : (\r\n        <>\r\n          {ListSheets()}\r\n          <h1>You currently have no character sheets!</h1>\r\n          <Button\r\n            color=\"primary\"\r\n            onClick={(e) => AddCharacter().then(getSheets)}\r\n          >\r\n            Add Character\r\n          </Button>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default HomePageManager;\r\n","C:\\Users\\Jerry\\workspace\\CharacterSheet\\PathfindersCompendium\\PathfindersCompendium\\client\\src\\providers\\UserProfileProvider.js",["98"],"import React, { useState, useEffect, createContext } from \"react\";\r\nimport { Spinner } from \"reactstrap\";\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\n\r\nexport const UserProfileContext = createContext();\r\n\r\nexport function UserProfileProvider(props) {\r\n  const apiUrl = \"/api/userprofile\";\r\n\r\n  const userProfile = localStorage.getItem(\"userProfile\");\r\n  const [isLoggedIn, setIsLoggedIn] = useState(userProfile != null);\r\n\r\n  const [isFirebaseReady, setIsFirebaseReady] = useState(false);\r\n  useEffect(() => {\r\n    firebase.auth().onAuthStateChanged((u) => {\r\n      setIsFirebaseReady(true);\r\n    });\r\n  }, []);\r\n\r\n  const login = (email, pw) => {\r\n    return firebase\r\n      .auth()\r\n      .signInWithEmailAndPassword(email, pw)\r\n      .then((signInResponse) => getUserProfile(signInResponse.user.uid))\r\n      .then((userProfile) => {\r\n        if (userProfile.UserStatusId == 2) {\r\n          console.log(\"this account is inactive\");\r\n        }\r\n        localStorage.setItem(\"userProfile\", JSON.stringify(userProfile));\r\n        setIsLoggedIn(true);\r\n        return userProfile;\r\n      });\r\n  };\r\n\r\n  const logout = () => {\r\n    return firebase\r\n      .auth()\r\n      .signOut()\r\n      .then(() => {\r\n        localStorage.clear();\r\n        setIsLoggedIn(false);\r\n      });\r\n  };\r\n\r\n  const register = (userProfile, password) => {\r\n    return firebase\r\n      .auth()\r\n      .createUserWithEmailAndPassword(userProfile.email, password)\r\n      .then((createResponse) =>\r\n        saveUser({ ...userProfile, firebaseUserId: createResponse.user.uid })\r\n      )\r\n      .then((savedUserProfile) => {\r\n        localStorage.setItem(\"userProfile\", JSON.stringify(savedUserProfile));\r\n        setIsLoggedIn(true);\r\n        return savedUserProfile;\r\n      });\r\n  };\r\n\r\n  const getToken = () => firebase.auth().currentUser.getIdToken();\r\n\r\n  const getUserProfile = (firebaseUserId) => {\r\n    return getToken().then((token) =>\r\n      fetch(`${apiUrl}/${firebaseUserId}`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      }).then((resp) => resp.json())\r\n    );\r\n  };\r\n\r\n  const saveUser = (userProfile) => {\r\n    return getToken().then((token) =>\r\n      fetch(apiUrl, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(userProfile),\r\n      }).then((resp) => resp.json())\r\n    );\r\n  };\r\n\r\n  const getCurrentUser = () => {\r\n    const user = localStorage.getItem(\"userProfile\");\r\n    if (!user) {\r\n      return null;\r\n    }\r\n    return JSON.parse(user);\r\n  };\r\n\r\n  const isAdmin = () => {\r\n    const user = getCurrentUser();\r\n    const adminTypeId = 1;\r\n    return user !== null && user.userTypeId === adminTypeId;\r\n  };\r\n\r\n  return (\r\n    <UserProfileContext.Provider\r\n      value={{\r\n        isLoggedIn,\r\n        login,\r\n        logout,\r\n        register,\r\n        getToken,\r\n        getCurrentUser,\r\n        isAdmin,\r\n      }}\r\n    >\r\n      {isFirebaseReady ? (\r\n        props.children\r\n      ) : (\r\n        <Spinner className=\"app-spinner dark\" />\r\n      )}\r\n    </UserProfileContext.Provider>\r\n  );\r\n}\r\n","C:\\Users\\Jerry\\workspace\\CharacterSheet\\PathfindersCompendium\\PathfindersCompendium\\client\\src\\Pages\\Login.js",["99"],"import React, { useContext, useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Button, Input } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { UserProfileContext } from \"../providers/UserProfileProvider\";\r\nimport \"./Login.css\";\r\n\r\nconst Login = () => {\r\n  const { login, logout } = useContext(UserProfileContext);\r\n  const [loading, setLoading] = useState(false);\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const history = useHistory();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    login(email, password)\r\n      .then((user) => {\r\n        setLoading(false);\r\n        user.userStatusId == 2\r\n          ? toast.info(\"That account in inactive\", logout())\r\n          : toast.info(`Welcome back ${user.displayName}`, history.push(\"/\"));\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        toast.error(\"Invalid email or password\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-form\">\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"avatar bg-primary\">\r\n          <img src=\"/quill.png\" alt=\"Avatar\" />\r\n        </div>\r\n        <h2 className=\"text-center\">User Login</h2>\r\n        <div className=\"form-group\">\r\n          <Input\r\n            onChange={(e) => setEmail(e.target.value)}\r\n            type=\"email\"\r\n            className=\"form-control\"\r\n            name=\"email\"\r\n            placeholder=\"Email\"\r\n            required=\"required\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <Input\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type=\"password\"\r\n            className=\"form-control\"\r\n            name=\"password\"\r\n            placeholder=\"Password\"\r\n            required=\"required\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <Button type=\"submit\" block color=\"danger\" disabled={loading}>\r\n            Sign in\r\n          </Button>\r\n        </div>\r\n        <div className=\"text-center small\">\r\n          Don't have an account?\r\n          <div>\r\n            <Link to=\"/register\">Sign up here</Link>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","C:\\Users\\Jerry\\workspace\\CharacterSheet\\PathfindersCompendium\\PathfindersCompendium\\client\\src\\Pages\\Register.js",[],"C:\\Users\\Jerry\\workspace\\CharacterSheet\\PathfindersCompendium\\PathfindersCompendium\\client\\src\\components\\Attributes.js",[],"C:\\Users\\Jerry\\workspace\\CharacterSheet\\PathfindersCompendium\\PathfindersCompendium\\client\\src\\components\\CharacterSheet.js",["100","101"],"import React, { useContext, useState } from \"react\";\r\nimport { TabPanel } from \"react-tabs\";\r\nimport { Row, Col, Button, Form, Label, Input, FormGroup } from \"reactstrap\";\r\nimport { UserProfileContext } from \"../providers/UserProfileProvider\";\r\nimport Attributes from \"./Attributes\";\r\nimport Defense from \"./Defense\";\r\nimport Offense from \"./Offense\";\r\nimport Skills from \"./Skills\";\r\n\r\nconst CharacterSheet = ({\r\n  sheet,\r\n  setEditing,\r\n  sheetToEdit,\r\n  getSheets,\r\n  classes,\r\n}) => {\r\n  const { getCurrentUser, getToken } = useContext(UserProfileContext);\r\n\r\n  const SaveCharacter = (sheet) => {\r\n    return getToken().then((token) => {\r\n      return fetch(`/api/CharacterSheet/${sheet.id}`, {\r\n        method: \"PUT\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify(sheet),\r\n      });\r\n    });\r\n  };\r\n  const DeleteCharacter = (sheet) => {\r\n    console.log(sheet);\r\n    return getToken().then((token) => {\r\n      return fetch(`/api/CharacterSheet/${sheet.id}`, {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n    });\r\n  };\r\n  const handleChange = (e) => {\r\n    const newSheet = { ...sheetToEdit };\r\n    newSheet[e.target.name] = e.target.value;\r\n    setEditing(newSheet);\r\n  };\r\n\r\n  function compare(a, b) {\r\n    if (a.name < b.name) {\r\n      return -1;\r\n    }\r\n    if (a.name > b.name) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  }\r\n  const attributes = [\r\n    \"Strength\",\r\n    \"Dexterity\",\r\n    \"Constitution\",\r\n    \"Intelligence\",\r\n    \"Wisdom\",\r\n    \"Charisma\",\r\n  ];\r\n  const skills = [\r\n    \"Acrobatics\",\r\n    \"Appraise\",\r\n    \"Bluff\",\r\n    \"Climb\",\r\n    \"Craft\",\r\n    \"Diplomacy\",\r\n    \"Disable Device\",\r\n    \"Disguise\",\r\n    \"Escape Artist\",\r\n    \"Fly\",\r\n    \"Handle Animal\",\r\n    \"Heal\",\r\n    \"Intimidate\",\r\n    \"Knowledge(Arcana)\",\r\n    \"Knowledge(Dungeoneering)\",\r\n    \"Knowledge(Engineering)\",\r\n    \"Knowledge(Geography)\",\r\n    \"Knowledge(History)\",\r\n    \"Knowledge(Local)\",\r\n    \"Knowledge(Nature)\",\r\n    \"Knowledge(Nobility)\",\r\n    \"Knowledge(Planes)\",\r\n    \"Knowledge(Religion)\",\r\n    \"Linguistics\",\r\n    \"Perception\",\r\n    \"Perform\",\r\n    \"Profession\",\r\n    \"Ride\",\r\n    \"Sense Motive\",\r\n    \"Sleight Of Hand\",\r\n    \"Spellcraft\",\r\n    \"Stealth\",\r\n    \"Survival\",\r\n    \"Swim\",\r\n    \"Use Magic Device\",\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <Form>\r\n        <Row>\r\n          <Col></Col>\r\n          <Col sm={6}>\r\n            <FormGroup>\r\n              <Row>\r\n                <Col sm={6}>\r\n                  <Label size=\"sm\" for=\"name\">\r\n                    Character Name:\r\n                  </Label>\r\n                  <Input\r\n                    size=\"sm\"\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    defaultValue={sheet.name}\r\n                    onChange={(e) => {\r\n                      e.preventDefault();\r\n                      handleChange(e);\r\n                    }}\r\n                  />\r\n                </Col>\r\n                <Col sm={6}>\r\n                  <Label size=\"sm\" for=\"alignment\">\r\n                    Alignment:\r\n                  </Label>\r\n                  <Input\r\n                    size=\"sm\"\r\n                    type=\"text\"\r\n                    name=\"alignment\"\r\n                    defaultValue={sheet.alignment}\r\n                    onChange={(e) => {\r\n                      e.preventDefault();\r\n                      handleChange(e);\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col sm={4}>\r\n                  <Label for=\"class\">Class:</Label>\r\n                  <Input\r\n                    size=\"sm\"\r\n                    type=\"select\"\r\n                    name=\"classId\"\r\n                    onChange={(e) => {\r\n                      e.preventDefault();\r\n                      handleChange(e);\r\n                    }}\r\n                  >\r\n                    <option disabled hidden value={0}>\r\n                      Please select a class\r\n                    </option>\r\n                    {classes.sort(compare).map((c) => (\r\n                      <option value={c.id} selected={c.id === sheet.classId}>\r\n                        {c.name}\r\n                      </option>\r\n                    ))}\r\n                  </Input>\r\n                </Col>\r\n                <Col sm={2}>\r\n                  <Label for=\"level\">Level:</Label>\r\n                  <Input\r\n                    size=\"sm\"\r\n                    type=\"text\"\r\n                    name=\"level\"\r\n                    defaultValue={sheet.level}\r\n                    onChange={(e) => {\r\n                      e.preventDefault();\r\n                      handleChange(e);\r\n                    }}\r\n                  />\r\n                </Col>\r\n                <Col sm={2}>\r\n                  <Label for=\"deity\">Deity:</Label>\r\n                  <Input\r\n                    size=\"sm\"\r\n                    type=\"text\"\r\n                    name=\"deity\"\r\n                    defaultValue={sheet.deity}\r\n                    onChange={(e) => {\r\n                      e.preventDefault();\r\n                      handleChange(e);\r\n                    }}\r\n                  />\r\n                </Col>\r\n                <Col sm={4}>\r\n                  <Label for=\"homeland\">Homeland:</Label>\r\n                  <Input\r\n                    size=\"sm\"\r\n                    type=\"text\"\r\n                    name=\"homeland\"\r\n                    defaultValue={sheet.homeland}\r\n                    onChange={(e) => {\r\n                      e.preventDefault();\r\n                      handleChange(e);\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col sm={3}>\r\n                  <Label for=\"race\">Race:</Label>\r\n                  <Input\r\n                    size=\"sm\"\r\n                    type=\"text\"\r\n                    name=\"race\"\r\n                    defaultValue={sheet.race}\r\n                    onChange={(e) => {\r\n                      e.preventDefault();\r\n                      handleChange(e);\r\n                    }}\r\n                  />\r\n                </Col>\r\n                <Col sm={3}>\r\n                  <Label for=\"size\">Size:</Label>\r\n                  <Input\r\n                    size=\"sm\"\r\n                    type=\"text\"\r\n                    name=\"size\"\r\n                    defaultValue={sheet.size}\r\n                    onChange={(e) => {\r\n                      e.preventDefault();\r\n                      handleChange(e);\r\n                    }}\r\n                  />\r\n                </Col>\r\n                <Col sm={3}>\r\n                  <Label for=\"gender\">Gender:</Label>\r\n                  <Input\r\n                    size=\"sm\"\r\n                    type=\"text\"\r\n                    name=\"gender\"\r\n                    defaultValue={sheet.gender}\r\n                    onChange={(e) => {\r\n                      e.preventDefault();\r\n                      handleChange(e);\r\n                    }}\r\n                  />\r\n                </Col>\r\n                <Col sm={3}>\r\n                  <Label for=\"age\">Age:</Label>\r\n                  <Input\r\n                    size=\"sm\"\r\n                    type=\"text\"\r\n                    name=\"age\"\r\n                    defaultValue={sheet.age}\r\n                    onChange={(e) => {\r\n                      e.preventDefault();\r\n                      handleChange(e);\r\n                    }}\r\n                  />\r\n                </Col>\r\n                <Col sm={3}>\r\n                  <Label for=\"height\">Height:</Label>\r\n                  <Input\r\n                    size=\"sm\"\r\n                    type=\"text\"\r\n                    name=\"height\"\r\n                    defaultValue={sheet.height}\r\n                    onChange={(e) => {\r\n                      e.preventDefault();\r\n                      handleChange(e);\r\n                    }}\r\n                  />\r\n                </Col>\r\n                <Col sm={3}>\r\n                  <Label for=\"weight\">Weight:</Label>\r\n                  <Input\r\n                    size=\"sm\"\r\n                    type=\"text\"\r\n                    name=\"weight\"\r\n                    defaultValue={sheet.weight}\r\n                    onChange={(e) => {\r\n                      e.preventDefault();\r\n                      handleChange(e);\r\n                    }}\r\n                  />\r\n                </Col>\r\n                <Col sm={3}>\r\n                  <Label for=\"hair\">Hair:</Label>\r\n                  <Input\r\n                    size=\"sm\"\r\n                    type=\"text\"\r\n                    name=\"hair\"\r\n                    defaultValue={sheet.hair}\r\n                    onChange={(e) => {\r\n                      e.preventDefault();\r\n                      handleChange(e);\r\n                    }}\r\n                  />\r\n                </Col>\r\n                <Col sm={3}>\r\n                  <Label for=\"eyes\">Eyes:</Label>\r\n                  <Input\r\n                    size=\"sm\"\r\n                    type=\"text\"\r\n                    name=\"eyes\"\r\n                    defaultValue={sheet.eyes}\r\n                    onChange={(e) => {\r\n                      e.preventDefault();\r\n                      handleChange(e);\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </FormGroup>\r\n          </Col>\r\n        </Row>\r\n        <Defense handleChange={handleChange} newSheet={sheetToEdit} />\r\n        <Offense handleChange={handleChange} newSheet={sheetToEdit} />\r\n        <FormGroup>\r\n          {attributes.map((att) => {\r\n            return (\r\n              <Attributes\r\n                key={att}\r\n                attribute={att}\r\n                handleChange={handleChange}\r\n                newSheet={sheetToEdit}\r\n              />\r\n            );\r\n          })}\r\n        </FormGroup>\r\n        <FormGroup>\r\n          {skills.map((att) => {\r\n            return (\r\n              <Skills\r\n                key={att}\r\n                skill={att}\r\n                handleChange={handleChange}\r\n                newSheet={sheetToEdit}\r\n              />\r\n            );\r\n          })}\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Row>\r\n            Speed:\r\n            <Col md={2}>Land: {sheet.landSpeed}</Col>\r\n            <Col md={2}>Run: {sheet.landSpeed * 4}</Col>\r\n            <Col md={2}>Swim: {sheet.swimSpeed}</Col>\r\n            <Col md={2}>Climb: {sheet.climbSpeed}</Col>\r\n            <Col md={2}>Fly: {sheet.flySpeed}</Col>\r\n          </Row>\r\n        </FormGroup>\r\n        <Button onClick={(e) => SaveCharacter(sheetToEdit).then(getSheets)}>\r\n          Save Changes\r\n        </Button>\r\n        <Button onClick={(e) => DeleteCharacter(sheetToEdit).then(getSheets)}>\r\n          Delete Character\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\nexport default CharacterSheet;\r\n","C:\\Users\\Jerry\\workspace\\CharacterSheet\\PathfindersCompendium\\PathfindersCompendium\\client\\src\\components\\Skills.js",["102","103"],"import React, { useContext, useState } from \"react\";\r\nimport { Col, Input, Label, Row } from \"reactstrap\";\r\nimport { InformationDataContext } from \"../providers/InformationDataProvider\";\r\n\r\nconst Skills = ({ skill, handleChange, newSheet }) => {\r\n  const { setToggle } = useContext(InformationDataContext);\r\n\r\n  const [tempMods, setTempMods] = useState({\r\n    str: 0,\r\n    dex: 0,\r\n    con: 0,\r\n    int: 0,\r\n    wis: 0,\r\n    cha: 0,\r\n  });\r\n  const getName = (s) => {\r\n    if (s === \"Knowledge(Arcana)\") {\r\n      return \"knowledgeArcana\";\r\n    }\r\n    if (s === \"Knowledge(Dungeoneering)\") {\r\n      return \"knowledgeDungeoneering\";\r\n    }\r\n    if (s === \"Knowledge(Engineering)\") {\r\n      return \"knowledgeEngineering\";\r\n    }\r\n    if (s === \"Knowledge(Geography)\") {\r\n      return \"knowledgeGeography\";\r\n    }\r\n    if (s === \"Knowledge(History)\") {\r\n      return \"knowledgeHistory\";\r\n    }\r\n    if (s === \"Knowledge(Local)\") {\r\n      return \"knowledgeLocal\";\r\n    }\r\n    if (s === \"Knowledge(Nature)\") {\r\n      return \"knowledgeNature\";\r\n    }\r\n    if (s === \"Knowledge(Nobility)\") {\r\n      return \"knowledgeNobility\";\r\n    }\r\n    if (s === \"Knowledge(Planes)\") {\r\n      return \"knowledgePlanes\";\r\n    }\r\n    if (s === \"Knowledge(Religion)\") {\r\n      return \"knowledgeReligion\";\r\n    }\r\n    let string = s.replace(/\\s+/g, \"\");\r\n    return string[0].toLowerCase() + string.slice(1);\r\n  };\r\n\r\n  const skillMath = (skill1, temp = 0) => {\r\n    let result = newSheet[getName(skill1)]\r\n      ? parseInt(newSheet[getName(skill1)])\r\n      : 0;\r\n    if ([\"Climb\", \"Swim\"].includes(skill1)) {\r\n      result += parseInt(newSheet.strMod);\r\n      return result;\r\n    }\r\n    if (\r\n      [\"Profession\", \"Survival\", \"Perception\", \"Heal\", \"Sense Motive\"].includes(\r\n        skill1\r\n      )\r\n    ) {\r\n      result += parseInt(newSheet.wisMod);\r\n      return result;\r\n    }\r\n    if (\r\n      [\r\n        \"Use Magic Device\",\r\n        \"Perform\",\r\n        \"Intimidate\",\r\n        \"Handle Animal\",\r\n        \"Bluff\",\r\n        \"Disguise\",\r\n        \"Diplomacy\",\r\n      ].includes(skill1)\r\n    ) {\r\n      result += parseInt(newSheet.chaMod);\r\n      return result;\r\n    }\r\n    if (\r\n      [\r\n        \"Appraise\",\r\n        \"Craft\",\r\n        \"Knowledge(Arcana)\",\r\n        \"Knowledge(Dungeoneering)\",\r\n        \"Knowledge(Engineering)\",\r\n        \"Knowledge(Geography)\",\r\n        \"Knowledge(History)\",\r\n        \"Knowledge(Local)\",\r\n        \"Knowledge(Nature)\",\r\n        \"Knowledge(Planes)\",\r\n        \"Knowledge(Religion)\",\r\n        \"Knowledge(Nobility)\",\r\n        \"Spellcraft\",\r\n        \"Linguistics\",\r\n      ].includes(skill1)\r\n    ) {\r\n      result += parseInt(newSheet.intMod);\r\n      return result;\r\n    }\r\n    if (\r\n      [\r\n        \"Acrobatics\",\r\n        \"Disable Device\",\r\n        \"Escape Artist\",\r\n        \"Fly\",\r\n        \"Ride\",\r\n        \"Sleight Of Hand\",\r\n        \"Stealth\",\r\n      ].includes(skill1)\r\n    ) {\r\n      result += parseInt(newSheet.dexMod);\r\n\r\n      return result;\r\n    }\r\n    return result;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Col\r\n      // md={{ offset: 2 }}\r\n      >\r\n        <Row style={{ textAlign: \"left\" }}>\r\n          <Label\r\n            size=\"sm\"\r\n            md={2}\r\n            for={skill}\r\n            onClick={(e) => setToggle(getName(skill))}\r\n          >\r\n            {skill}\r\n          </Label>{\" \"}\r\n          <Col size=\"sm\" md={{ size: 2, offset: 2 }}>\r\n            <Input\r\n              id={skill}\r\n              name={getName(skill)}\r\n              defaultValue={newSheet[getName(skill)]}\r\n              onChange={(e) => handleChange(e)}\r\n            />\r\n          </Col>\r\n          <Col size=\"sm\" sm={2}>\r\n            <Input readOnly value={skillMath(skill)} />\r\n          </Col>\r\n        </Row>\r\n      </Col>\r\n    </>\r\n  );\r\n};\r\nexport default Skills;\r\n","C:\\Users\\Jerry\\workspace\\CharacterSheet\\PathfindersCompendium\\PathfindersCompendium\\client\\src\\components\\Defense.js",["104"],"import React, { useContext, useState } from \"react\";\r\nimport { Col, Input, Label, Row } from \"reactstrap\";\r\nimport { InformationDataContext } from \"../providers/InformationDataProvider\";\r\n\r\nconst Defense = ({ handleChange, newSheet }) => {\r\n  const { setToggle } = useContext(InformationDataContext);\r\n  const CalcAC = (num) => {\r\n    const stat = isNaN(num) ? 0 : parseInt(num);\r\n    return 10 + stat;\r\n  };\r\n  const CalcSave = (save, mod) => {\r\n    let save1 = isNaN(save) ? 0 : parseInt(save);\r\n    let mod1 = isNaN(mod) ? 0 : parseInt(mod);\r\n    return mod1 + save1;\r\n  };\r\n  return (\r\n    <>\r\n      <Col sm={{ offset: 2 }}>\r\n        <Row style={{ textAlign: \"right\" }}>\r\n          <Label\r\n            size=\"sm\"\r\n            md={{ size: 2, textAlign: \"left\" }}\r\n            onClick={(e) => setToggle(\"AC\")}\r\n          >\r\n            AC\r\n          </Label>\r\n          <Col size=\"sm\" sm={1} style={{ textAlign: \"left\" }}>\r\n            <Input readOnly value={CalcAC(parseInt(newSheet.ac))} />\r\n          </Col>\r\n          <Col size=\"sm\" sm={1}>\r\n            <Input\r\n              // type=\"number\"\r\n              defaultValue={0}\r\n              name=\"ac\"\r\n              onChange={(e) => handleChange(e)}\r\n            />\r\n          </Col>\r\n          <Label size=\"sm\" md={2} for=\"touchAC\">\r\n            Touch\r\n          </Label>\r\n          <Col size=\"sm\" sm={1}>\r\n            <Input\r\n              readOnly\r\n              name=\"touchAC\"\r\n              value={CalcAC(parseInt(newSheet.dexMod))}\r\n            />\r\n          </Col>\r\n          <Label size=\"sm\" md={2} for=\"flatFootAC\">\r\n            Flat-Footed\r\n          </Label>\r\n          <Col size=\"sm\" sm={1}>\r\n            <Input\r\n              readOnly\r\n              name=\"flatFootAC\"\r\n              value={CalcAC(parseInt(newSheet.ac))}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row style={{ textAlign: \"right\" }}>\r\n          <Label\r\n            size=\"sm\"\r\n            md={2}\r\n            for=\"fortSave\"\r\n            onClick={(e) => setToggle(\"SavingThrows\")}\r\n          >\r\n            Fortitude\r\n          </Label>\r\n          <Col size=\"sm\" sm={1}>\r\n            <Input\r\n              name=\"fortSave\"\r\n              defaultValue={newSheet.fortSave}\r\n              onChange={(e) => handleChange(e)}\r\n            />\r\n          </Col>\r\n          <Col size=\"sm\" sm={1}>\r\n            <Input\r\n              readOnly\r\n              value={CalcSave(\r\n                parseInt(newSheet.fortSave),\r\n                parseInt(newSheet.conMod)\r\n              )}\r\n            />\r\n          </Col>\r\n          <Label\r\n            size=\"sm\"\r\n            md={2}\r\n            for=\"refSave\"\r\n            onClick={(e) => setToggle(\"SavingThrows\")}\r\n          >\r\n            Reflex\r\n          </Label>\r\n          <Col size=\"sm\" sm={1}>\r\n            <Input\r\n              name=\"refSave\"\r\n              defaultValue={newSheet.refSave}\r\n              onChange={(e) => handleChange(e)}\r\n            />\r\n          </Col>\r\n          <Col size=\"sm\" sm={1}>\r\n            <Input\r\n              readOnly\r\n              value={CalcSave(\r\n                parseInt(newSheet.refSave),\r\n                parseInt(newSheet.dexMod)\r\n              )}\r\n            />\r\n          </Col>\r\n          <Label\r\n            size=\"sm\"\r\n            md={2}\r\n            for=\"willSave\"\r\n            onClick={(e) => setToggle(\"SavingThrows\")}\r\n          >\r\n            Will\r\n          </Label>\r\n          <Col size=\"sm\" sm={1}>\r\n            <Input\r\n              defaultValue={newSheet.willSave}\r\n              name=\"willSave\"\r\n              onChange={(e) => handleChange(e)}\r\n            />\r\n          </Col>\r\n          <Col size=\"sm\" sm={1}>\r\n            <Input\r\n              readOnly\r\n              value={CalcSave(\r\n                parseInt(newSheet.willSave),\r\n                parseInt(newSheet.wisMod)\r\n              )}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </Col>\r\n    </>\r\n  );\r\n};\r\nexport default Defense;\r\n","C:\\Users\\Jerry\\workspace\\CharacterSheet\\PathfindersCompendium\\PathfindersCompendium\\client\\src\\components\\Offense.js",[],"C:\\Users\\Jerry\\workspace\\CharacterSheet\\PathfindersCompendium\\PathfindersCompendium\\client\\src\\components\\InformationViews.js",["105","106","107","108"],"import React, { useContext, useState } from \"react\";\r\nimport { Container } from \"reactstrap\";\r\nimport { InformationDataContext } from \"../providers/InformationDataProvider\";\r\nimport { UserProfileContext } from \"../providers/UserProfileProvider\";\r\nimport Information from \"./AC\";\r\n\r\nconst InformationViews = () => {\r\n  const { isLoggedIn } = useContext(UserProfileContext);\r\n  const { isAdmin } = useContext(UserProfileContext);\r\n  const [dataArray, setDataArray] = useState(Information);\r\n  const { setToggle } = useContext(InformationDataContext);\r\n  const { toggle } = useContext(InformationDataContext);\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        <div style={{ textAlign: \"left\" }}>{dataArray[toggle]}</div>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InformationViews;\r\n","C:\\Users\\Jerry\\workspace\\CharacterSheet\\PathfindersCompendium\\PathfindersCompendium\\client\\src\\providers\\InformationDataProvider.js",["109","110"],"import React, { useState, useEffect, createContext } from \"react\";\r\nimport { Spinner } from \"reactstrap\";\r\n\r\nexport const InformationDataContext = createContext();\r\n\r\nexport function InformationDataProvider(props) {\r\n  const [toggle, setToggle] = useState(\"\");\r\n  return (\r\n    <InformationDataContext.Provider value={{ toggle, setToggle }}>\r\n      {props.children}\r\n    </InformationDataContext.Provider>\r\n  );\r\n}\r\n","C:\\Users\\Jerry\\workspace\\CharacterSheet\\PathfindersCompendium\\PathfindersCompendium\\client\\src\\components\\AC.js",["111"],"import { ListGroupItemHeading } from \"reactstrap\";\r\nimport { InformationDataContext } from \"../providers/InformationDataProvider\";\r\n\r\nconst Information = {\r\n  AbilityScores: (\r\n    <>\r\n      <p>\r\n        <ListGroupItemHeading>\r\n          <b>Ability Scores</b>\r\n        </ListGroupItemHeading>\r\n      </p>\r\n      <p>\r\n        Each character has six ability scores that represent his character’s\r\n        most basic attributes. They are his raw talent and prowess. While a\r\n        character rarely rolls a check using just an ability score, these\r\n        scores, and the modifiers they create, affect nearly every aspect of a\r\n        character’s skills and abilities. Each ability score generally ranges\r\n        from 3 to 18, although racial bonuses and penalties can alter this; an\r\n        average ability score is 10.{\" \"}\r\n      </p>\r\n    </>\r\n  ),\r\n  Skills: (\r\n    <>\r\n      <p>\r\n        <ListGroupItemHeading>\r\n          <b>Skills</b>\r\n        </ListGroupItemHeading>\r\n      </p>\r\n      <p>\r\n        Skills represent some of the most basic and yet most fundamental\r\n        abilities your character possesses. As your character advances in level,\r\n        he can gain new skills and improve his existing skills dramatically.\r\n        This section describes each skill, including common uses and typical\r\n        modifiers. Characters can sometimes use skills for purposes other than\r\n        those noted here, at the GM’s discretion.\r\n      </p>\r\n    </>\r\n  ),\r\n  Alignment: (\r\n    <>\r\n      <p>\r\n        <ListGroupItemHeading>\r\n          <b>Alignment</b>\r\n        </ListGroupItemHeading>\r\n      </p>\r\n      <p>\r\n        This game assumes good and evil are definitive things. Evidence for this\r\n        outlook can be found in the indicated good or evil monster subtypes,\r\n        spells that detect good and evil, and spells that have the good or evil\r\n        descriptor. Characters using spells with the evil descriptor should\r\n        consider themselves to be committing minor acts of evil, though using\r\n        spells to create undead is an even more grievous act of evil that\r\n        requires atonement. Creatures with an evil subtype (generally outsiders)\r\n        are creatures that are fundamentally evil: devils, daemons, and demons,\r\n        for instance. Their redemption is rare, if it is even possible. They are\r\n        evil to their very core, and commit evil acts perpetually and\r\n        persistently. Mortals with an evil alignment, however, are different\r\n        from these beings. In fact, having an evil alignment alone does not make\r\n        one a super-villain or even require one to be thwarted or killed. The\r\n        extent of a character’s evil alignment might be a lesser evil, like\r\n        selfishness, greed, or extreme vanity. Having these qualities might not\r\n        even cause the character to detect as evil when subjected to detect\r\n        evil, as creatures possessing 4 or fewer Hit Dice do not register to the\r\n        spell (with the exception of clerics or other characters that radiate an\r\n        aura).\r\n      </p>\r\n      <p>\r\n        A creature’s general moral and personal attitudes are represented by its\r\n        alignment: lawful good, neutral good, chaotic good, lawful neutral,\r\n        neutral, chaotic neutral, lawful evil, neutral evil, or chaotic evil.\r\n      </p>\r\n      <p>\r\n        Alignment is a tool for developing your character’s identity—it is not a\r\n        straitjacket for restricting your character. Each alignment represents a\r\n        broad range of personality types or personal philosophies, so two\r\n        characters of the same alignment can still be quite different from each\r\n        other. In addition, few people are completely consistent.\r\n      </p>\r\n      <p>\r\n        All creatures have an alignment and alignment determines the\r\n        effectiveness of some spells and magic items.\r\n      </p>\r\n      <p>\r\n        Animals and other creatures incapable of moral action are neutral. Even\r\n        deadly vipers and tigers that eat people are neutral because they lack\r\n        the capacity for morally right or wrong behavior. Dogs may be obedient\r\n        and cats free-spirited, but they do not have the moral capacity to be\r\n        truly lawful or chaotic.\r\n      </p>\r\n      <p>\r\n        <ListGroupItemHeading>\r\n          <b>Good Versus Evil</b>\r\n        </ListGroupItemHeading>\r\n      </p>\r\n      <p>\r\n        Good characters and creatures protect innocent life. Evil characters and\r\n        creatures debase or destroy innocent life, whether for fun or profit.\r\n      </p>\r\n      <p>\r\n        <b>Good</b> Good implies altruism, respect for life, and a concern for\r\n        the dignity of sentient beings. Good characters make personal sacrifices\r\n        to help others.\r\n      </p>\r\n      <p>\r\n        <b>Evil</b> Evil implies hurting, oppressing, and killing others. Some\r\n        evil creatures simply have no compassion for others and kill without\r\n        qualms if doing so is convenient. Others actively pursue evil, killing\r\n        for sport or out of duty to some evil deity or master.\r\n      </p>\r\n      <p>\r\n        <b>Neutral</b> People who are neutral with respect to good and evil have\r\n        compunctions against killing the innocent, but may lack the commitment\r\n        to make sacrifices to protect or help others.\r\n      </p>\r\n      <p>\r\n        <ListGroupItemHeading>\r\n          <b>Law Versus Chaos</b>\r\n        </ListGroupItemHeading>\r\n      </p>\r\n      <p>\r\n        Lawful characters tell the truth, keep their word, respect authority,\r\n        honor tradition, and judge those who fall short of their duties. Chaotic\r\n        characters follow their consciences, resent being told what to do, favor\r\n        new ideas over tradition, and do what they promise if they feel like it.\r\n      </p>\r\n      <p>\r\n        <b>Law</b> Law implies honor, trustworthiness, obedience to authority,\r\n        and reliability. On the downside, lawfulness can include\r\n        closed-mindedness, reactionary adherence to tradition,\r\n        self-righteousness, and a lack of adaptability. Those who consciously\r\n        promote lawfulness say that only lawful behavior creates a society in\r\n        which people can depend on each other and make the right decisions in\r\n        full confidence that others will act as they should.\r\n      </p>\r\n      <p>\r\n        <b>Chaos</b> Chaos implies freedom, adaptability, and flexibility. On\r\n        the downside, chaos can include recklessness, resentment toward\r\n        legitimate authority, arbitrary actions, and irresponsibility. Those who\r\n        promote chaotic behavior say that only unfettered personal freedom\r\n        allows people to express themselves fully and lets society benefit from\r\n        the potential that its individuals have within them.\r\n      </p>\r\n      <p>\r\n        <b>Neutral</b> Someone who is neutral with respect to law and chaos has\r\n        some respect for authority and feels neither a compulsion to obey nor a\r\n        compulsion to rebel. She is generally honest, but can be tempted into\r\n        lying or deceiving others.\r\n      </p>\r\n    </>\r\n  ),\r\n  knowledgeArcana: (\r\n    <>\r\n      <p>\r\n        <ListGroupItemHeading>\r\n          Knowledge (Int; Trained Only)\r\n        </ListGroupItemHeading>\r\n      </p>\r\n      <p>\r\n        Contents [show] You are educated in a field of study and can answer both\r\n        simple and complex questions. Like the Craft, Perform, and Profession\r\n        skills, Knowledge actually encompasses a number of different\r\n        specialties.\r\n      </p>\r\n      <p>\r\n        Below are listed typical fields of study.\r\n        <ul>\r\n          <li>\r\n            <b>Arcana</b> (ancient mysteries, magic traditions, arcane symbols,\r\n            constructs, dragons, magical beasts); Although robots are\r\n            constructs, Knowledge (arcana) cannot be used to identify robots or\r\n            their abilities and weaknesses.\r\n          </li>\r\n          <li>\r\n            <b>Dungeoneering</b> (aberrations, caverns, oozes, spelunking)\r\n          </li>\r\n          <li>\r\n            <b>Engineering</b> (buildings, aqueducts, bridges, fortifications);\r\n            This is the most important skill with regard to technological\r\n            subjects. Knowledge (engineering) can be used to identify a robot’s\r\n            abilities and weaknesses. Knowledge (engineering) is also used to\r\n            identify and understand unknown technological objects in a similar\r\n            manner to how Spellcraft is used to identify the properties of a\r\n            magic item. The DC to correctly identify and understand an unknown\r\n            technological object is equal to the object’s Craft DC. An object\r\n            with a Craft DC of 15 or less can be automatically identified and\r\n            understood by someone trained in Knowledge (engineering) who also\r\n            has the Technologist feat.\r\n          </li>\r\n          <li>\r\n            <b>Geography</b> (lands, terrain, climate, people); Used for\r\n            astronomy.\r\n          </li>\r\n          <li>\r\n            <b>History</b> (wars, colonies, migrations, founding of cities)\r\n          </li>\r\n          <li>\r\n            <b>Local</b> (legends, personalities, inhabitants, laws, customs,\r\n            traditions, humanoids)\r\n          </li>\r\n          <li>\r\n            <b>Nature</b> (animals, fey, monstrous humanoids, plants, seasons\r\n            and cycles, weather, vermin)\r\n          </li>\r\n          <li>\r\n            <b>Nobility</b> (lineages, heraldry, personalities, royalty)\r\n          </li>\r\n          <li>\r\n            <b>Planes</b> (the Inner Planes, the Outer Planes, the Astral Plane,\r\n            the Ethereal Plane, outsiders, planar magic)\r\n          </li>\r\n          <li>\r\n            <b>Religion</b> (gods and goddesses, mythic history, ecclesiastic\r\n            tradition, holy symbols, undead)\r\n          </li>\r\n        </ul>\r\n      </p>\r\n      <p>\r\n        <ListGroupItemHeading>Common Uses</ListGroupItemHeading>\r\n      </p>\r\n      <p>\r\n        <b>General Knowledge</b>\r\n      </p>\r\n      <p>\r\n        Answering a question within your field of study has a DC of 10 (for\r\n        really easy questions), 15 (for basic questions), or 20 to 30 (for\r\n        really tough questions).\r\n      </p>\r\n      <p>\r\n        <b>Monster Lore</b>\r\n      </p>\r\n      <p>\r\n        You can use this skill to identify monsters and their special powers or\r\n        vulnerabilities.\r\n      </p>\r\n    </>\r\n  ),\r\n  intimidate: (\r\n    <>\r\n      <p>\r\n        <ListGroupItemHeading>Intimidate (Cha)</ListGroupItemHeading>\r\n      </p>\r\n      <p>\r\n        You can use this skill to frighten your opponents or to get them to act\r\n        in a way that benefits you. This skill includes verbal threats and\r\n        displays of prowess.\r\n      </p>\r\n      <p>\r\n        <b>\r\n          <ListGroupItemHeading>Common Uses</ListGroupItemHeading>\r\n        </b>\r\n      </p>\r\n      <p>\r\n        <b>Coerce Opponent</b>\r\n      </p>\r\n      <p>\r\n        Sometimes you need to cow someone into submission for more than just a\r\n        few hours.\r\n      </p>\r\n      <p>\r\n        <b>Action:</b> Coercing a target into acting friendly for hours takes\r\n        1d4 × 10 minutes. Coercing a target into acting friendly for days\r\n        requires you to successfully use coercion at least once per week for 1d6\r\n        weeks without failing any Intimidate checks against the target during\r\n        that time.\r\n      </p>\r\n      <p>\r\n        <b>Check:</b> By spending more time threatening or harassing a target,\r\n        you can attempt to force a creature to act friendly toward you for 1d6\r\n        hours + 1 hour for every 5 points by which you exceed the DC. If you\r\n        succeed at such a check against the same target at least once per week\r\n        for 1d6 weeks (without ever failing any Intimidate checks against the\r\n        target during that time), the duration of the coercion increases to 2d8\r\n        days. Coercion is overt, not subtle, and in most cases using coercion\r\n        against a creature is an evil act.\r\n      </p>\r\n      <p>\r\n        A coerced target acts as though friendly toward you even when you aren’t\r\n        around, but the aid offered remains grudging at best. The target’s true\r\n        attitude is hostile, and if the target believes it can take an action to\r\n        hinder you that can’t be traced back to it, it’s likely to take such\r\n        opportunities.\r\n      </p>\r\n      <p>\r\n        Creatures attempting to enlist its aid against you can often do so by\r\n        convincing the target they are able to protect it from your wrath, using\r\n        the normal Diplomacy rules.\r\n      </p>\r\n      <p>\r\n        <b>Demoralize Opponent</b>\r\n      </p>\r\n      <p>\r\n        You can use this skill to cause an opponent to become shaken for a\r\n        number of rounds. This shaken condition doesn’t stack with other shaken\r\n        conditions to make an affected creature frightened. The DC of this check\r\n        is equal to 10 + the target’s Hit Dice + the target’s Wisdom modifier.\r\n      </p>\r\n      <ul>\r\n        <li></li>\r\n      </ul>\r\n    </>\r\n  ),\r\n  handleAnimal: (\r\n    <>\r\n      <p>\r\n        <ListGroupItemHeading>\r\n          Handle Animal (Cha; Trained Only)\r\n        </ListGroupItemHeading>\r\n      </p>\r\n      <p>\r\n        You are trained at working with animals, and can teach them tricks, get\r\n        them to follow your simple commands, or even domesticate them.\r\n      </p>\r\n      <p>\r\n        <b>\r\n          <ListGroupItemHeading>Common Uses</ListGroupItemHeading>\r\n        </b>\r\n      </p>\r\n      <p>\r\n        <b>Handle an Animal</b>\r\n      </p>\r\n      <p>\r\n        This task involves commanding an animal to perform a task or trick that\r\n        it knows. If the animal is wounded or has taken any nonlethal damage or\r\n        ability score damage, the DC increases by 2. If your check succeeds, the\r\n        animal performs the task or trick on its next action.\r\n      </p>\r\n      <p>\r\n        <b>Push An Animal</b>\r\n      </p>\r\n      <p>\r\n        To push an animal means to get it to perform a task or trick that it\r\n        doesn’t know but is physically capable of performing. This category also\r\n        covers making an animal perform a forced march or forcing it to hustle\r\n        for more than 1 hour between sleep cycles. If the animal is wounded or\r\n        has taken any nonlethal damage or ability score damage, the DC increases\r\n        by 2. If your check succeeds, the animal performs the task or trick on\r\n        its next action.\r\n      </p>\r\n      <p>\r\n        <b>Teach an Animal a Trick</b>\r\n      </p>\r\n      <p>\r\n        You can teach an animal a specific trick with one week of work and a\r\n        successful Handle Animal check against the indicated DC. An animal with\r\n        an Intelligence score of 1 can learn a maximum of three tricks, while an\r\n        animal with an Intelligence score of 2 can learn a maximum of six\r\n        tricks.\r\n      </p>\r\n    </>\r\n  ),\r\n  fly: (\r\n    <>\r\n      <p>\r\n        <ListGroupItemHeading>\r\n          Fly (Dex; Armor Check Penalty)\r\n        </ListGroupItemHeading>\r\n      </p>\r\n      <p>\r\n        You are skilled at flying, either through the use of wings or magic, and\r\n        you can perform daring or complex maneuvers while airborne. Note that\r\n        this skill does not give you the ability to fly.\r\n      </p>\r\n      <p>\r\n        <b>Special Requirement</b>\r\n      </p>\r\n      <p>\r\n        You cannot take this skill without a natural means of flight or gliding.\r\n        Creatures can also take ranks in Fly if they possess a reliable means of\r\n        flying every day (either through a spell or other magical manner, such\r\n        as a druid’s wild shape ability).\r\n      </p>\r\n    </>\r\n  ),\r\n  escapeArtist: (\r\n    <>\r\n      <p>\r\n        <ListGroupItemHeading>\r\n          Escape Artist (Dex; Armor Check Penalty)\r\n        </ListGroupItemHeading>\r\n      </p>\r\n      <p>Your training allows you to slip bonds and escape from grapples.</p>\r\n      <p>\r\n        <u>\r\n          <b>Common Uses</b>\r\n        </u>\r\n      </p>\r\n      <p>\r\n        <b>Escape Ropes</b>\r\n      </p>\r\n      <p>\r\n        The DC of your Escape Artist check is equal to the binder’s combat\r\n        maneuver bonus +20.\r\n      </p>\r\n      <p>\r\n        <b>Escape Manacles</b>\r\n      </p>\r\n      <p>\r\n        The DC to escape normal manacles is 30. The DC to escape masterwork\r\n        manacles is 35.\r\n      </p>\r\n    </>\r\n  ),\r\n  disguise: (\r\n    <>\r\n      <p>\r\n        <ListGroupItemHeading>Disguise (Cha)</ListGroupItemHeading>\r\n      </p>\r\n      <p>You are skilled at changing your appearance.</p>\r\n      <p>\r\n        <b>Check</b>\r\n      </p>\r\n      <p>\r\n        Your Disguise check result determines how good the disguise is, and it\r\n        is opposed by others’ Perception check results. If you don’t draw any\r\n        attention to yourself, others do not get to make Perception checks. If\r\n        you come to the attention of people who are suspicious (such as a guard\r\n        who is watching commoners walking through a city gate), it can be\r\n        assumed that such observers are taking 10 on their Perception checks.\r\n      </p>\r\n      <p>\r\n        You get only one Disguise check per use of the skill, even if several\r\n        people are making Perception checks against it. The Disguise check is\r\n        made secretly, so that you can’t be sure how good the result is.\r\n      </p>\r\n      <p>\r\n        The effectiveness of your disguise depends in part on how much you’re\r\n        attempting to change your appearance.\r\n      </p>\r\n    </>\r\n  ),\r\n  disableDevice: (\r\n    <>\r\n      <p>\r\n        <ListGroupItemHeading>\r\n          Disable Device (Dex; Armor Check Penalty; Trained Only)\r\n        </ListGroupItemHeading>\r\n      </p>\r\n      <p>\r\n        You are skilled at disarming traps and opening locks. In addition, this\r\n        skill lets you sabotage simple mechanical devices, such as catapults,\r\n        wagon wheels, and doors.\r\n      </p>\r\n      <p>\r\n        <u>\r\n          <b>Common Uses</b>\r\n        </u>\r\n      </p>\r\n      <p>\r\n        <b>Disarm Trap or Device</b>\r\n      </p>\r\n      <p>\r\n        When disarming a trap or other device, the Disable Device check is made\r\n        secretly, so that you don’t necessarily know whether you’ve succeeded.\r\n      </p>\r\n      <p>\r\n        <b>Open A Lock</b>\r\n      </p>\r\n      <p>\r\n        The DC to open a lock depends on the lock’s quality: <b>simple</b> (DC\r\n        20),\r\n        <b>average</b> (DC 25), <b>good</b> (DC 30), or <b>superior</b> (DC 40).\r\n      </p>\r\n    </>\r\n  ),\r\n  diplomacy: (\r\n    <>\r\n      <p>\r\n        <ListGroupItemHeading>Diplomacy (Cha)</ListGroupItemHeading>\r\n      </p>\r\n      <p>\r\n        You can use this skill to persuade others to agree with your arguments,\r\n        to resolve differences, and to gather valuable information or rumors\r\n        from people. This skill is also used to negotiate conflicts by using the\r\n        proper etiquette and manners suitable to the problem.\r\n      </p>\r\n      <p>\r\n        <ListGroupItemHeading>\r\n          <b>Common Uses</b>\r\n        </ListGroupItemHeading>\r\n      </p>\r\n      <p>\r\n        <b>Gather Information</b>\r\n      </p>\r\n      <p>\r\n        You can use Diplomacy to gather information about a specific topic or\r\n        individual. To do this, you must spend at least 1d4 hours canvassing\r\n        people at local taverns, markets, and gathering places. The DC of this\r\n        check depends on the obscurity of the information sought, but for most\r\n        commonly known facts or rumors it is 10. For obscure or secret\r\n        knowledge, the DC might increase to 20 or higher. The GM might rule that\r\n        some topics are simply unknown to common folk.\r\n      </p>\r\n    </>\r\n  ),\r\n  craft: (\r\n    <>\r\n      <p>\r\n        <b>Craft (Int)</b>\r\n      </p>\r\n      <p>\r\n        You are skilled in the creation of a specific group of items, such as\r\n        armor or weapons. Like Knowledge, Perform, and Profession, Craft is\r\n        actually a number of separate skills. You could have several Craft\r\n        skills, each with its own ranks. The most common Craft skills are\r\n        alchemy, armor, baskets, books, bows, calligraphy, carpentry, cloth,\r\n        clothing, glass, jewelry, leather, locks, paintings, pottery,\r\n        sculptures, ships, shoes, stonemasonry, traps, and weapons.\r\n      </p>\r\n      <p>\r\n        A Craft skill is specifically focused on creating something. If nothing\r\n        is created by the endeavor, it probably falls under the heading of a\r\n        Profession skill.\r\n      </p>\r\n      <p>\r\n        <u>\r\n          <b>Common Uses</b>\r\n        </u>\r\n      </p>\r\n      <p>\r\n        <b>Practice Trade</b>\r\n      </p>\r\n      <p>\r\n        You can practice your trade and make a decent living, earning half your\r\n        check result in gold pieces per week of dedicated work. You know how to\r\n        use the tools of your trade, how to perform the craft’s daily tasks, how\r\n        to supervise untrained helpers, and how to handle common problems.\r\n        (Untrained laborers and assistants earn an average of 1 silver piece per\r\n        day.)\r\n      </p>\r\n      <p>\r\n        <b>Make Something</b>\r\n      </p>\r\n      <p>\r\n        The basic function of the Craft skill, however, is to allow you to make\r\n        an item of the appropriate type. The DC depends on the complexity of the\r\n        item to be created. The DC, your check result, and the price of the item\r\n        determine how long it takes to make a particular item. The item’s\r\n        finished price also determines the cost of raw materials.\r\n      </p>\r\n    </>\r\n  ),\r\n  SavingThrows: (\r\n    <>\r\n      <p>\r\n        <b>Saving Throws</b>\r\n      </p>\r\n      <p>\r\n        Generally, when you are subject to an unusual or magical attack, you get\r\n        a Saving Throw to avoid or reduce the effect. Like an attack roll, a\r\n        Saving Throw is a d20 roll plus a bonus based on your class and level\r\n        (see Classes), and an associated Ability Score. Your Saving Throw\r\n        modifier is:\r\n        <p>\r\n          <b>Base save bonus + ability modifier</b>\r\n        </p>\r\n      </p>\r\n      <p>\r\n        <i>Fortitude:</i> These saves measure your ability to stand up to\r\n        physical punishment or attacks against your vitality and health. Apply\r\n        your Constitution modifier to your Fortitude saving throws.\r\n      </p>\r\n      <p>\r\n        <i>Reflex:</i> These saves test your ability to dodge area attacks and\r\n        unexpected situations. Apply your Dexterity modifier to your Reflex\r\n        saving throws.\r\n      </p>\r\n      <p>\r\n        <i>Will:</i> These saves reflect your Resistance to mental influence as\r\n        well as many magical effects. Apply your Wisdom modifier to your Will\r\n        saving throws.\r\n      </p>\r\n      <p>\r\n        <b>Automatic Failures and Successes:</b> A natural 1 (the d20 comes up\r\n        1) on a Saving Throw is always a failure (and may cause Damage to\r\n        exposed items; see Items Surviving after a Saving Throw). A natural 20\r\n        (the d20 comes up 20) is always a success.\r\n      </p>\r\n    </>\r\n  ),\r\n  Rogue: (\r\n    <>\r\n      <p>\r\n        <ListGroupItemHeading>\r\n          <b>Rogue</b>\r\n        </ListGroupItemHeading>\r\n      </p>\r\n      <p>\r\n        Life is an endless adventure for those who live by their wits. Ever just\r\n        one step ahead of danger, rogues bank on their cunning, skill, and charm\r\n        to bend fate to their favor. Never knowing what to expect, they prepare\r\n        for everything, becoming masters of a wide variety of skills, training\r\n        themselves to be adept manipulators, agile acrobats, shadowy stalkers,\r\n        or masters of any of dozens of other professions or talents. Thieves and\r\n        gamblers, fast talkers and diplomats, bandits and bounty hunters, and\r\n        explorers and investigators all might be considered rogues, as well as\r\n        countless other professions that rely upon wits, prowess, or luck.\r\n        Although many rogues favor cities and the innumerable opportunities of\r\n        civilization, some embrace lives on the road, journeying far, meeting\r\n        exotic people, and facing fantastic danger in pursuit of equally\r\n        fantastic riches. In the end, any who desire to shape their fates and\r\n        live life on their own terms might come to be called rogues.\r\n      </p>\r\n      <p>\r\n        <b>Role:</b> Rogues excel at moving about unseen and catching foes\r\n        unaware, and tend to avoid head-to-head combat. Their varied skills and\r\n        abilities allow them to be highly versatile, with great variations in\r\n        expertise existing between different rogues. Most, however, excel in\r\n        overcoming hindrances of all types, from unlocking doors and disarming\r\n        traps to outwitting magical hazards and conning dull-witted opponents.\r\n      </p>\r\n    </>\r\n  ),\r\n  Bard: (\r\n    <>\r\n      <p>\r\n        <ListGroupItemHeading>\r\n          <b>Bard</b>\r\n        </ListGroupItemHeading>\r\n      </p>\r\n      <p>\r\n        Untold wonders and secrets exist for those skillful enough to discover\r\n        them. Through cleverness, talent, and magic, these cunning few unravel\r\n        the wiles of the world, becoming adept in the arts of persuasion,\r\n        manipulation, and inspiration. Typically masters of one or many forms of\r\n        artistry, bards possess an uncanny ability to know more than they should\r\n        and use what they learn to keep themselves and their allies ever one\r\n        step ahead of danger. Bards are quick-witted and captivating, and their\r\n        skills might lead them down many paths, be they gamblers or\r\n        jacks-of-all-trades, scholars or performers, leaders or scoundrels, or\r\n        even all of the above. For bards, every day brings its own\r\n        opportunities, adventures, and challenges, and only by bucking the odds,\r\n        knowing the most, and being the best might they claim the treasures of\r\n        each.\r\n      </p>\r\n      <p>\r\n        <b>Role:</b> Bards capably confuse and confound their foes while\r\n        inspiring their allies to ever-greater daring. While accomplished with\r\n        both weapons and magic, the true strength of bards lies outside melee,\r\n        where they can support their companions and undermine their foes without\r\n        fear of interruptions to their performances.\r\n      </p>\r\n    </>\r\n  ),\r\n  Wizard: (\r\n    <>\r\n      <p>\r\n        <ListGroupItemHeading>Wizard</ListGroupItemHeading>\r\n      </p>\r\n      <p>\r\n        Beyond the veil of the mundane hide the secrets of absolute power. The\r\n        works of beings beyond mortals, the legends of realms where gods and\r\n        spirits tread, the lore of creations both wondrous and terrible—such\r\n        mysteries call to those with the ambition and the intellect to rise\r\n        above the common folk to grasp true might. Such is the path of the\r\n        wizard. These shrewd magic-users seek, collect, and covet esoteric\r\n        knowledge, drawing on cultic arts to work wonders beyond the abilities\r\n        of mere mortals. While some might choose a particular field of magical\r\n        study and become masters of such powers, others embrace versatility,\r\n        reveling in the unbounded wonders of all magic. In either case, wizards\r\n        prove a cunning and potent lot, capable of smiting their foes,\r\n        empowering their allies, and shaping the world to their every desire.\r\n      </p>\r\n      <p>\r\n        <b>Role:</b> While universalist wizards might study to prepare\r\n        themselves for any manner of danger, specialist wizards research schools\r\n        of magic that make them exceptionally skilled within a specific focus.\r\n        Yet no matter their specialty, all wizards are masters of the impossible\r\n        and can aid their allies in overcoming any danger.\r\n      </p>\r\n    </>\r\n  ),\r\n  Barbarian: (\r\n    <>\r\n      <p>\r\n        <ListGroupItemHeading>Barbarian</ListGroupItemHeading>\r\n      </p>\r\n      <p>\r\n        For some, there is only rage. In the ways of their people, in the fury\r\n        of their passion, in the howl of battle, conflict is all these brutal\r\n        souls know. Savages, hired muscle, masters of vicious martial\r\n        techniques, they are not soldiers or professional warriors—they are the\r\n        battle possessed, creatures of slaughter and spirits of war. Known as\r\n        barbarians, these warmongers know little of training, preparation, or\r\n        the rules of warfare; for them, only the moment exists, with the foes\r\n        that stand before them and the knowledge that the next moment might hold\r\n        their death. They possess a sixth sense in regard to danger and the\r\n        endurance to weather all that might entail. These brutal warriors might\r\n        rise from all walks of life, both civilized and savage, though whole\r\n        societies embracing such philosophies roam the wild places of the world.\r\n        Within barbarians storms the primal spirit of battle, and woe to those\r\n        who face their rage.\r\n      </p>\r\n      <p>\r\n        <b>Role:</b> Barbarians excel in combat, possessing the martial prowess\r\n        and fortitude to take on foes seemingly far superior to themselves. With\r\n        rage granting them boldness and daring beyond that of most other\r\n        warriors, barbarians charge furiously into battle and ruin all who would\r\n        stand in their way.\r\n      </p>\r\n    </>\r\n  ),\r\n  climb: (\r\n    <>\r\n      <p>\r\n        <b>Climb (Str; Armor Check Penalty)</b>\r\n      </p>\r\n      <p>\r\n        You are skilled at scaling vertical surfaces, from smooth city walls to\r\n        rocky cliffs.\r\n      </p>\r\n      <p>\r\n        <b>Check</b>\r\n      </p>\r\n      <p>\r\n        With a successful Climb check, you can advance up, down, or across a\r\n        slope, wall, or other steep incline (or even across a ceiling, provided\r\n        it has handholds) at one-quarter your normal speed. A slope is\r\n        considered to be any incline at an angle measuring less than 60 degrees;\r\n        a wall is any incline at an angle measuring 60 degrees or more. A Climb\r\n        check that fails by 4 or less means that you make no progress, and one\r\n        that fails by 5 or more means that you fall from whatever height you\r\n        have already attained. The DC of the check depends on the conditions of\r\n        the climb. Compare the task with those on the following table to\r\n        determine an appropriate DC.\r\n      </p>\r\n      <p>\r\n        You need both hands free to climb, but you may cling to a wall with one\r\n        hand while you cast a spell or take some other action that requires only\r\n        one hand. While climbing, you can’t move to avoid a blow, so you lose\r\n        your Dexterity bonus to AC (if any). You also can’t use a shield while\r\n        climbing. Anytime you take damage while climbing, make a Climb check\r\n        against the DC of the slope or wall. Failure means you fall from your\r\n        current height and sustain the appropriate falling damage.\r\n      </p>\r\n    </>\r\n  ),\r\n  bluff: (\r\n    <>\r\n      <p>\r\n        <b>Bluff (Cha)</b>\r\n      </p>\r\n      <p>You know how to tell a lie.</p>\r\n      <p>\r\n        <b>Check</b>\r\n      </p>\r\n      <p>\r\n        Bluff is an opposed skill check against your opponent’s Sense Motive\r\n        skill.\r\n      </p>\r\n    </>\r\n  ),\r\n  appraise: (\r\n    <>\r\n      <p>\r\n        <b>Appraise (Int)</b>\r\n      </p>\r\n      <p>You can evaluate the monetary value of an object.</p>\r\n      <p>\r\n        <b>Appraise Value of Item</b>\r\n      </p>\r\n      <p>\r\n        A DC 20 Appraise check determines the value of a common item. If you\r\n        succeed by 5 or more, you also determine if the item has magic\r\n        properties, although this success does not grant knowledge of the magic\r\n        item’s abilities. If you fail the check by less than 5, you determine\r\n        the price of that item to within 20% of its actual value. If you fail\r\n        this check by 5 or more, the price is wildly inaccurate, subject to GM\r\n        discretion. Particularly rare or exotic items might increase the DC of\r\n        this check by 5 or more.\r\n      </p>\r\n      <p>\r\n        You can also use this check to determine the most valuable item visible\r\n        in a treasure hoard. The DC of this check is generally 20 but can\r\n        increase to as high as 30 for a particularly large hoard.\r\n      </p>\r\n    </>\r\n  ),\r\n  acrobatics: (\r\n    <>\r\n      <p>\r\n        <b>Acrobatics (Dex; Armor Check Penalty)</b>\r\n      </p>\r\n      <p>\r\n        You can keep your balance while traversing narrow or treacherous\r\n        surfaces. You can also dive, flip, jump, and roll, avoiding attacks and\r\n        confusing your opponents.\r\n      </p>\r\n    </>\r\n  ),\r\n  cha: (\r\n    <>\r\n      <p>\r\n        <b>Charisma (Cha)</b>\r\n      </p>\r\n      <p>\r\n        Charisma measures a character's personality, personal magnetism, ability\r\n        to lead, and appearance. It is the most important ability for paladins,\r\n        sorcerers, and bards. It is also important for clerics, since it affects\r\n        their ability to channel energy. For Undead creatures, Charisma is a\r\n        measure of their unnatural “lifeforce.” Every Creature has a Charisma\r\n        score. A character with a Charisma score of 0 is not able to exert\r\n        himself in any way and is unconscious.\r\n      </p>\r\n      <p>\r\n        You apply your character's Charisma modifier to:\r\n        <ul>\r\n          <li>\r\n            Bluff, Diplomacy, Disguise, Handle Animal, Intimidate, Perform, and\r\n            Use Magic Device checks.\r\n          </li>\r\n          <li>Checks that represent attempts to influence others.</li>\r\n          <li>\r\n            Channel energy DCs for clerics and paladins attempting to harm\r\n            Undead foes.\r\n          </li>\r\n        </ul>\r\n      </p>\r\n      <p>\r\n        Bards, paladins, and sorcerers gain a number of bonus Spells based on\r\n        their Charisma scores. The minimum Charisma score needed to cast a bard,\r\n        Paladin, or Sorcerer spell is 10 + the spell's level.\r\n      </p>\r\n    </>\r\n  ),\r\n  wis: (\r\n    <>\r\n      <p>\r\n        <b>Wisdom (Wis)</b>\r\n      </p>\r\n      <p>\r\n        Wisdom describes a character’s willpower, common sense, awareness, and\r\n        intuition. Wisdom is the most important ability for clerics and druids,\r\n        and it is also important for monks and rangers. If you want your\r\n        character to have acute senses, put a high score in Wisdom. Every\r\n        creature has a Wisdom score. A character with a Wisdom score of 0 is\r\n        incapable of rational thought and is unconscious.\r\n      </p>\r\n      <p>\r\n        You apply your character’s Wisdom modifier to:\r\n        <ul>\r\n          <li>\r\n            Will saving throws (for negating the effects of charm person and\r\n            other spells).\r\n          </li>\r\n          <li>\r\n            Heal, Perception, Profession, Sense Motive, and Survival checks.\r\n          </li>\r\n        </ul>\r\n      </p>\r\n      <p>\r\n        Clerics, druids, and rangers get bonus spells based on their Wisdom\r\n        scores. The minimum Wisdom score needed to cast a cleric, druid, or\r\n        ranger spell is 10 + the spell’s level.\r\n      </p>\r\n    </>\r\n  ),\r\n  int: (\r\n    <>\r\n      <p>\r\n        <b>Intelligence (Int)</b>\r\n      </p>\r\n      <p>\r\n        Intelligence determines how well your character learns and reasons. This\r\n        ability is important for wizards because it affects their spellcasting\r\n        ability in many ways. Creatures of animal-level instinct have\r\n        Intelligence scores of 1 or 2. Any creature capable of understanding\r\n        speech has a score of at least 3. A character with an Intelligence score\r\n        of 0 is comatose. Some creatures do not possess an Intelligence score.\r\n        Their modifier is +0 for any Intelligence-based skills or checks.\r\n      </p>\r\n      <p>\r\n        You apply your character’s Intelligence modifier to:\r\n        <ul>\r\n          <li>\r\n            The number of bonus languages your character knows at the start of\r\n            the game. These are in addition to any starting racial languages and\r\n            Common. If you have a penalty, you can still read and speak your\r\n            racial languages unless your Intelligence is lower than 3.\r\n          </li>\r\n          <li>\r\n            The number of skill points gained each level, though your character\r\n            always gets at least 1 skill point per level.\r\n          </li>\r\n          <li>\r\n            Appraise, Craft, Knowledge, Linguistics, and Spellcraft checks.\r\n          </li>\r\n        </ul>\r\n      </p>\r\n      <p>\r\n        A wizard gains bonus spells based on his Intelligence score. The minimum\r\n        Intelligence score needed to cast a wizard spell is 10 + the spell’s\r\n        level.\r\n      </p>\r\n    </>\r\n  ),\r\n  con: (\r\n    <>\r\n      <p>\r\n        <b>Constitution (Con)</b>\r\n      </p>\r\n      <p>\r\n        Constitution represents your character’s health and stamina. A\r\n        Constitution bonus increases a character’s hit points, so the ability is\r\n        important for all classes. Some creatures, such as undead and\r\n        constructs, do not have a Constitution score. Their modifier is +0 for\r\n        any Constitution-based checks. A character with a Constitution score of\r\n        0 is dead.\r\n      </p>\r\n      <p>\r\n        You apply your character’s Constitution modifier to:\r\n        <ul>\r\n          <li>\r\n            Each roll of a Hit Die (though a penalty can never drop a result\r\n            below 1—that is, a character always gains at least 1 hit point each\r\n            time he advances in level).\r\n          </li>\r\n          <li>\r\n            Fortitude saving throws, for resisting poison, disease, and similar\r\n            threats.\r\n          </li>\r\n        </ul>\r\n      </p>\r\n      <p>\r\n        If a character’s Constitution score changes enough to alter his or her\r\n        Constitution modifier, the character’s hit points also increase or\r\n        decrease accordingly.\r\n      </p>\r\n    </>\r\n  ),\r\n  dex: (\r\n    <>\r\n      <p>\r\n        <b>Dexterity (Dex)</b>\r\n      </p>\r\n      <p>\r\n        Dexterity measures agility, reflexes, and balance. This ability is the\r\n        most important one for rogues, but it’s also useful for characters who\r\n        wear light or medium armor or no armor at all. This ability is vital for\r\n        characters seeking to excel with ranged weapons, such as the bow or\r\n        sling. A character with a Dexterity score of 0 is incapable of moving\r\n        and is effectively immobile (but not unconscious).\r\n      </p>\r\n      <p>\r\n        You apply your character’s Dexterity modifier to:\r\n        <ul>\r\n          <li>\r\n            Ranged attack rolls, including those for attacks made with bows,\r\n            crossbows, throwing axes, and many ranged spell attacks like\r\n            scorching ray or searing light.\r\n          </li>\r\n          <li>\r\n            Armor Class (AC), provided that the character can react to the\r\n            attack.\r\n          </li>\r\n          <li>\r\n            Reflex saving throws, for avoiding fireballs and other attacks that\r\n            you can escape by moving quickly.\r\n          </li>\r\n          <li>\r\n            Acrobatics, Disable Device, Escape Artist, Fly, Ride, Sleight of\r\n            Hand, and Stealth checks.\r\n          </li>\r\n        </ul>\r\n      </p>\r\n    </>\r\n  ),\r\n  AC: (\r\n    <>\r\n      <p>\r\n        <b>Armor Class (AC)</b>\r\n      </p>\r\n      <p>\r\n        Your Armor Class (AC) represents how hard it is for opponents to land a\r\n        solid, damaging blow on you. It's the Attack Roll result that an\r\n        opponent needs to achieve to hit you. Your AC is equal to the following:\r\n      </p>\r\n      <p>\r\n        <b>\r\n          10 + armor bonus + Shield bonus + Dexterity modifier + other modifiers\r\n        </b>\r\n      </p>\r\n      <p>\r\n        Note that armor limits your Dexterity bonus, so if you're wearing armor,\r\n        you might not be able to apply your whole Dexterity bonus to your AC\r\n        (see Table: Armor and Shields).\r\n      </p>\r\n      <p>\r\n        Sometimes you can't use your Dexterity bonus (if you have one). If you\r\n        can't react to a blow, you can't use your Dexterity bonus to AC. If you\r\n        don't have a Dexterity bonus, your AC does not change.\r\n      </p>\r\n      <p>\r\n        <b>Other Modifiers:</b> Many other factors modify your AC.\r\n      </p>\r\n      <p>\r\n        <i>Enhancement Bonuses:</i> Enhancement bonuses apply to your armor to\r\n        increase the armor bonus it provides.\r\n      </p>\r\n      <p>\r\n        <b>Touch Attacks</b>: Some attacks completely disregard armor, including\r\n        shields and natural armor—the aggressor need only touch a foe for such\r\n        an attack to take full effect. In these cases, the attacker makes a\r\n        touch Attack Roll (either ranged or melee). When you are the target of a\r\n        touch attack, your AC doesn't include any Armor bonus, Shield bonus, or\r\n        natural armor bonus. All other modifiers, such as your size modifier,\r\n        Dexterity modifier, and Deflection bonus (if any) apply normally. Some\r\n        creatures have the ability to make Incorporeal touch attacks. These\r\n        attacks bypass solid objects, such as armor and shields, by passing\r\n        through them. Incorporeal touch attacks work similarly to normal touch\r\n        attacks except that they also ignore cover bonuses. Incorporeal touch\r\n        attacks do not ignore armor bonuses granted by force effects, such as{\" \"}\r\n        <i>Mage Armor</i> and <i>bracers of armor</i>.\r\n      </p>\r\n    </>\r\n  ),\r\n  str: (\r\n    <>\r\n      <p>\r\n        <b>Strength (Str)</b>\r\n      </p>\r\n      <p>\r\n        Strength measures muscle and physical power. This ability is important\r\n        for those who engage in hand-to-hand (or “melee”) combat, such as\r\n        fighters, monks, paladins, and some rangers. Strength also sets the\r\n        maximum amount of weight your character can carry.\r\n      </p>\r\n      <p>\r\n        A character with a Strength score of 0 is too weak to move in any way\r\n        and is unconscious. Some creatures (such as incorporeal creatures) do\r\n        not possess a Strength score and have no modifier at all to\r\n        Strength-based skills or checks.\r\n      </p>\r\n      <p>\r\n        You apply your character’s Strength modifier to:\r\n        <ul>\r\n          <li>Melee attack rolls.</li>\r\n          <li>\r\n            Damage rolls when using a melee weapon or a thrown weapon, including\r\n            a sling. (Exceptions: Off-hand attacks receive only half the\r\n            character’s Strength bonus, while two-handed attacks receive 1–1/2\r\n            times the Strength bonus. A Strength penalty, but not a bonus,\r\n            applies to attacks made with a bow that is not a composite bow.)\r\n          </li>\r\n          <li>Climb and Swim checks.</li>\r\n          <li>Strength checks (for breaking down doors and the like).</li>\r\n        </ul>\r\n      </p>\r\n    </>\r\n  ),\r\n};\r\nInformation.knowledgeDungeoneering = Information.knowledgeArcana;\r\nInformation.knowledgeEngineering = Information.knowledgeArcana;\r\nInformation.knowledgeGeography = Information.knowledgeArcana;\r\nInformation.knowledgeHistory = Information.knowledgeArcana;\r\nInformation.knowledgeLocal = Information.knowledgeArcana;\r\nInformation.knowledgeNature = Information.knowledgeArcana;\r\nInformation.knowledgeNobility = Information.knowledgeArcana;\r\nInformation.knowledgePlanes = Information.knowledgeArcana;\r\nInformation.knowledgeReligion = Information.knowledgeArcana;\r\nexport default Information;\r\n","C:\\Users\\Jerry\\workspace\\CharacterSheet\\PathfindersCompendium\\PathfindersCompendium\\client\\src\\components\\Spells.js",["112","113","114","115","116","117","118"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Col,\r\n  Input,\r\n  Label,\r\n  ListGroup,\r\n  ListGroupItem,\r\n  ListGroupItemHeading,\r\n  ListGroupItemText,\r\n  ModalFooter,\r\n  Row,\r\n} from \"reactstrap\";\r\nimport { InformationDataContext } from \"../providers/InformationDataProvider\";\r\nimport { UserProfileContext } from \"../providers/UserProfileProvider\";\r\nimport Information from \"./AC\";\r\n\r\nconst Spells = ({ newSheet, handleChange }) => {\r\n  const { getToken } = useContext(UserProfileContext);\r\n  const { setToggle } = useContext(InformationDataContext);\r\n  const [spells, setSpells] = useState([]);\r\n  const [userSpells, setUserSpells] = useState([]);\r\n  const [spellToAdd, setSpell] = useState(0);\r\n\r\n  useEffect(() => {\r\n    GetSpells();\r\n    GetSheetSpells();\r\n  }, []);\r\n  useEffect(() => {}, [userSpells]);\r\n  const GetSheetSpells = (_) => {\r\n    return getToken().then((token) =>\r\n      fetch(`/api/spellsheet/${newSheet.id}`)\r\n        .then((res) => res.json())\r\n        .then(setUserSpells)\r\n    );\r\n  };\r\n  const getName = (s) => {\r\n    let string = s.replace(/\\s+/g, \"\");\r\n    return string[0].toLowerCase() + string.slice(1);\r\n  };\r\n  const GetSpells = (_) => {\r\n    return fetch(\"/api/spell\")\r\n      .then((res) => res.json())\r\n      .then(setSpells);\r\n  };\r\n  const AddToSheet = (id) => {\r\n    if (id === 0) {\r\n      return;\r\n    }\r\n    return getToken().then((token) =>\r\n      fetch(`/api/spellsheet`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify({ sheetId: newSheet.id, spellId: id }),\r\n      })\r\n    );\r\n  };\r\n  const RemoveFromSheet = (userSpell) => {\r\n    if (userSpell.id === 0) {\r\n      return;\r\n    }\r\n    return getToken().then((token) =>\r\n      fetch(`/api/spellsheet/${userSpell.id}`, {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  while (spells[0] === undefined) {\r\n    return null;\r\n  }\r\n  return (\r\n    <>\r\n      <Input\r\n        type=\"select\"\r\n        onChange={(e) => {\r\n          setSpell(e.target.value);\r\n          setToggle(getName(e.target.options[e.target.selectedIndex].text));\r\n        }}\r\n      >\r\n        <option selected={0 == spellToAdd} hidden>\r\n          Please select a spell.\r\n        </option>\r\n        {spells.map((spell) => {\r\n          Information[getName(spell.name)] = (\r\n            <>\r\n              <p>\r\n                <b>{spell.name}</b>\r\n              </p>\r\n              <p>\r\n                School: {spell.school} Level:{\" \"}\r\n                {spell.bard !== \"NULL\" ? \"Bard: \" + spell.bard : null}{\" \"}\r\n                {spell.cleric !== \"NULL\" ? \"Cleric: \" + spell.cleric : null}{\" \"}\r\n                {spell.druid !== \"NULL\" ? \"Druid: \" + spell.druid : null}{\" \"}\r\n                {spell.magus !== \"NULL\" ? \"Magus: \" + spell.magus : null}{\" \"}\r\n                {spell.wiz !== \"NULL\" ? \"Wiz/Sor: \" + spell.wiz : null}{\" \"}\r\n                {spell.witch !== \"NULL\" ? \"Witch: \" + spell.witch : null}{\" \"}\r\n              </p>\r\n              <p>\r\n                <i>{spell.description}</i>\r\n              </p>\r\n              <p>\r\n                {spell.prerequisites != null ? (\r\n                  <p>Prerequisites: {spell.prerequisites}</p>\r\n                ) : null}\r\n              </p>\r\n              <p>\r\n                {spell.benefit != null ? <p>Benefit: {spell.benefit}</p> : null}\r\n              </p>\r\n              <p>\r\n                {spell.normal != null ? <p>Normal: {spell.normal} </p> : null}\r\n              </p>\r\n            </>\r\n          );\r\n          return (\r\n            <option selected={spell.id == spellToAdd} value={spell.id}>\r\n              {spell.name}\r\n            </option>\r\n          );\r\n        })}\r\n      </Input>\r\n      <br></br>\r\n      <Button\r\n        color=\"success\"\r\n        onClick={(e) => AddToSheet(spellToAdd).then(GetSheetSpells)}\r\n      >\r\n        Add To Sheet\r\n      </Button>{\" \"}\r\n      <ListGroup>\r\n        <Row>\r\n          {userSpells.map((uf) => (\r\n            <>\r\n              <Col md={2}>\r\n                <ListGroupItem\r\n                  onClick={(e) => setToggle(getName(uf.spell.name))}\r\n                >\r\n                  {uf.spell.name}\r\n                  <Button\r\n                    onClick={(e) => RemoveFromSheet(uf).then(GetSheetSpells)}\r\n                  >\r\n                    Remove\r\n                  </Button>\r\n                </ListGroupItem>\r\n              </Col>\r\n            </>\r\n          ))}\r\n        </Row>\r\n      </ListGroup>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Spells;\r\n","C:\\Users\\Jerry\\workspace\\CharacterSheet\\PathfindersCompendium\\PathfindersCompendium\\client\\src\\components\\Feats.js",["119","120","121","122","123","124","125","126"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Col,\r\n  Container,\r\n  Input,\r\n  Label,\r\n  ListGroup,\r\n  ListGroupItem,\r\n  ListGroupItemHeading,\r\n  ListGroupItemText,\r\n  ModalFooter,\r\n  Row,\r\n} from \"reactstrap\";\r\nimport { InformationDataContext } from \"../providers/InformationDataProvider\";\r\nimport { UserProfileContext } from \"../providers/UserProfileProvider\";\r\nimport Information from \"./AC\";\r\nconst Feats = ({ newSheet, handleChange }) => {\r\n  const { getToken } = useContext(UserProfileContext);\r\n\r\n  const { setToggle } = useContext(InformationDataContext);\r\n  const [feats, setFeats] = useState([]);\r\n  const [userFeats, setUserFeats] = useState([]);\r\n  const [featToAdd, setFeat] = useState(0);\r\n\r\n  useEffect(() => {\r\n    GetFeats();\r\n    GetSheetFeats();\r\n  }, []);\r\n  useEffect(() => {}, [userFeats]);\r\n\r\n  const GetSheetFeats = (_) => {\r\n    return getToken().then((token) =>\r\n      fetch(`/api/featsheet/${newSheet.id}`)\r\n        .then((res) => res.json())\r\n        .then(setUserFeats)\r\n    );\r\n  };\r\n  const getName = (s) => {\r\n    let string = s.replace(/\\s+/g, \"\");\r\n    return string[0].toLowerCase() + string.slice(1);\r\n  };\r\n  const GetFeats = (_) => {\r\n    return fetch(\"/api/feat\")\r\n      .then((res) => res.json())\r\n      .then(setFeats);\r\n  };\r\n  const AddToSheet = (id) => {\r\n    if (id === 0) {\r\n      return;\r\n    }\r\n    return getToken().then((token) =>\r\n      fetch(`/api/featsheet`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify({ sheetId: newSheet.id, featId: id }),\r\n      })\r\n    );\r\n  };\r\n  const RemoveFromSheet = (userFeat) => {\r\n    if (userFeat.id === 0) {\r\n      return;\r\n    }\r\n    return getToken().then((token) =>\r\n      fetch(`/api/featsheet/${userFeat.id}`, {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  while (feats[0] === undefined) {\r\n    return null;\r\n  }\r\n  return (\r\n    <>\r\n      <Input\r\n        type=\"select\"\r\n        onChange={(e) => {\r\n          setFeat(e.target.value);\r\n          setToggle(getName(e.target.options[e.target.selectedIndex].text));\r\n        }}\r\n      >\r\n        <option selected={0 == featToAdd} hidden>\r\n          Please select a feat.\r\n        </option>\r\n        {feats.map((feat) => {\r\n          Information[getName(`${feat.name} (${feat.type})`)] = (\r\n            <>\r\n              <p>\r\n                <b>\r\n                  {feat.name} ({feat.type})\r\n                </b>\r\n              </p>\r\n              <p>\r\n                <i>{feat.description}</i>\r\n              </p>\r\n              <p>\r\n                {feat.prerequisites != null ? (\r\n                  <p>Prerequisites: {feat.prerequisites}</p>\r\n                ) : null}\r\n              </p>\r\n              <p>\r\n                {feat.benefit != null ? <p>Benefit: {feat.benefit}</p> : null}\r\n              </p>\r\n              <p>\r\n                {feat.normal != null ? <p>Normal: {feat.normal} </p> : null}\r\n              </p>\r\n            </>\r\n          );\r\n          return (\r\n            <option selected={feat.id == featToAdd} value={feat.id}>\r\n              {feat.name} ({feat.type})\r\n            </option>\r\n          );\r\n        })}\r\n      </Input>\r\n      <br></br>\r\n      <Button\r\n        color=\"success\"\r\n        onClick={(e) => AddToSheet(featToAdd).then(GetSheetFeats)}\r\n      >\r\n        Add To Sheet\r\n      </Button>\r\n      <Container>\r\n        <ListGroup>\r\n          {userFeats.map((uf) => (\r\n            <>\r\n              <span>\r\n                <ListGroupItemHeading\r\n                  onClick={(e) =>\r\n                    setToggle(getName(`${uf.feat.name} (${uf.feat.type})`))\r\n                  }\r\n                >\r\n                  {uf.feat.name} ({uf.feat.type}){\" \"}\r\n                  <Button\r\n                    onClick={(e) => RemoveFromSheet(uf).then(GetSheetFeats)}\r\n                  >\r\n                    Remove\r\n                  </Button>\r\n                </ListGroupItemHeading>\r\n                <ListGroupItemText>{uf.feat.benefit}</ListGroupItemText>\r\n              </span>\r\n            </>\r\n          ))}\r\n        </ListGroup>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\nexport default Feats;\r\n",{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","severity":1,"message":"132","line":8,"column":21,"nodeType":"133","messageId":"134","endLine":8,"endColumn":25},{"ruleId":"131","severity":1,"message":"135","line":10,"column":11,"nodeType":"133","messageId":"134","endLine":10,"endColumn":18},{"ruleId":"131","severity":1,"message":"135","line":17,"column":35,"nodeType":"133","messageId":"134","endLine":17,"endColumn":42},{"ruleId":"136","severity":1,"message":"137","line":23,"column":6,"nodeType":"138","endLine":23,"endColumn":8,"suggestions":"139"},{"ruleId":"140","severity":1,"message":"141","line":27,"column":38,"nodeType":"142","messageId":"143","endLine":27,"endColumn":40},{"ruleId":"140","severity":1,"message":"141","line":22,"column":27,"nodeType":"142","messageId":"143","endLine":22,"endColumn":29},{"ruleId":"131","severity":1,"message":"144","line":12,"column":3,"nodeType":"133","messageId":"134","endLine":12,"endColumn":16},{"ruleId":"131","severity":1,"message":"145","line":30,"column":11,"nodeType":"133","messageId":"134","endLine":30,"endColumn":25},{"ruleId":"131","severity":1,"message":"146","line":8,"column":10,"nodeType":"133","messageId":"134","endLine":8,"endColumn":18},{"ruleId":"131","severity":1,"message":"147","line":8,"column":20,"nodeType":"133","messageId":"134","endLine":8,"endColumn":31},{"ruleId":"131","severity":1,"message":"148","line":1,"column":29,"nodeType":"133","messageId":"134","endLine":1,"endColumn":37},{"ruleId":"131","severity":1,"message":"149","line":8,"column":11,"nodeType":"133","messageId":"134","endLine":8,"endColumn":21},{"ruleId":"131","severity":1,"message":"135","line":9,"column":11,"nodeType":"133","messageId":"134","endLine":9,"endColumn":18},{"ruleId":"131","severity":1,"message":"150","line":10,"column":21,"nodeType":"133","messageId":"134","endLine":10,"endColumn":33},{"ruleId":"131","severity":1,"message":"151","line":11,"column":11,"nodeType":"133","messageId":"134","endLine":11,"endColumn":20},{"ruleId":"131","severity":1,"message":"152","line":1,"column":27,"nodeType":"133","messageId":"134","endLine":1,"endColumn":36},{"ruleId":"131","severity":1,"message":"153","line":2,"column":10,"nodeType":"133","messageId":"134","endLine":2,"endColumn":17},{"ruleId":"131","severity":1,"message":"154","line":2,"column":10,"nodeType":"133","messageId":"134","endLine":2,"endColumn":32},{"ruleId":"131","severity":1,"message":"155","line":6,"column":3,"nodeType":"133","messageId":"134","endLine":6,"endColumn":8},{"ruleId":"131","severity":1,"message":"156","line":9,"column":3,"nodeType":"133","messageId":"134","endLine":9,"endColumn":23},{"ruleId":"131","severity":1,"message":"157","line":10,"column":3,"nodeType":"133","messageId":"134","endLine":10,"endColumn":20},{"ruleId":"131","severity":1,"message":"158","line":11,"column":3,"nodeType":"133","messageId":"134","endLine":11,"endColumn":14},{"ruleId":"136","severity":1,"message":"159","line":28,"column":6,"nodeType":"138","endLine":28,"endColumn":8,"suggestions":"160"},{"ruleId":"140","severity":1,"message":"141","line":87,"column":29,"nodeType":"142","messageId":"143","endLine":87,"endColumn":31},{"ruleId":"140","severity":1,"message":"141","line":122,"column":40,"nodeType":"142","messageId":"143","endLine":122,"endColumn":42},{"ruleId":"131","severity":1,"message":"161","line":4,"column":3,"nodeType":"133","messageId":"134","endLine":4,"endColumn":6},{"ruleId":"131","severity":1,"message":"155","line":7,"column":3,"nodeType":"133","messageId":"134","endLine":7,"endColumn":8},{"ruleId":"131","severity":1,"message":"162","line":9,"column":3,"nodeType":"133","messageId":"134","endLine":9,"endColumn":16},{"ruleId":"131","severity":1,"message":"158","line":12,"column":3,"nodeType":"133","messageId":"134","endLine":12,"endColumn":14},{"ruleId":"131","severity":1,"message":"163","line":13,"column":3,"nodeType":"133","messageId":"134","endLine":13,"endColumn":6},{"ruleId":"136","severity":1,"message":"164","line":29,"column":6,"nodeType":"138","endLine":29,"endColumn":8,"suggestions":"165"},{"ruleId":"140","severity":1,"message":"141","line":89,"column":29,"nodeType":"142","messageId":"143","endLine":89,"endColumn":31},{"ruleId":"140","severity":1,"message":"141","line":117,"column":39,"nodeType":"142","messageId":"143","endLine":117,"endColumn":41},"no-native-reassign",["166"],"no-negated-in-lhs",["167"],"no-unused-vars","'Pane' is defined but never used.","Identifier","unusedVar","'isAdmin' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'ListSheets' and 'getSheets'. Either include them or remove the dependency array.","ArrayExpression",["168"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'NavbarToggler' is defined but never used.","'getCurrentUser' is assigned a value but never used.","'tempMods' is assigned a value but never used.","'setTempMods' is assigned a value but never used.","'useState' is defined but never used.","'isLoggedIn' is assigned a value but never used.","'setDataArray' is assigned a value but never used.","'setToggle' is assigned a value but never used.","'useEffect' is defined but never used.","'Spinner' is defined but never used.","'InformationDataContext' is defined but never used.","'Label' is defined but never used.","'ListGroupItemHeading' is defined but never used.","'ListGroupItemText' is defined but never used.","'ModalFooter' is defined but never used.","React Hook useEffect has a missing dependency: 'GetSheetSpells'. Either include it or remove the dependency array.",["169"],"'Col' is defined but never used.","'ListGroupItem' is defined but never used.","'Row' is defined but never used.","React Hook useEffect has a missing dependency: 'GetSheetFeats'. Either include it or remove the dependency array.",["170"],"no-global-assign","no-unsafe-negation",{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},"Update the dependencies array to be: [ListSheets, getSheets]",{"range":"177","text":"178"},"Update the dependencies array to be: [GetSheetSpells]",{"range":"179","text":"180"},"Update the dependencies array to be: [GetSheetFeats]",{"range":"181","text":"182"},[852,854],"[ListSheets, getSheets]",[807,809],"[GetSheetSpells]",[812,814],"[GetSheetFeats]"]